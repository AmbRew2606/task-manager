package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"task-meneger/pkg/storage"
	"task-meneger/pkg/storage/postgres"

	"github.com/joho/godotenv"
)

func main() {

	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ env
	err := godotenv.Load()
	if err != nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	var storage storage.Interface
	storage, err = postgres.New()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer storage.Close()

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –º–µ–Ω—é –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
	fmt.Println("-------------------------------")
	fmt.Println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Task Manager!")
	fmt.Println("-------------------------------")
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("\n=============TASK==============")
		fmt.Println("1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
		fmt.Println("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
		fmt.Println("3. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
		fmt.Println("4. –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
		fmt.Println("\n============LABELS=============")
		fmt.Println("5. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫")
		fmt.Println("6. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–µ—Ç–∫—É")
		fmt.Println("\n============USERS==============")
		fmt.Println("7. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		fmt.Println("8. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("\n============SEARCH=============")
		fmt.Println("9. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∞–≤—Ç–æ—Ä—É")

		fmt.Println("10. –í—ã–π—Ç–∏")

		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")
		scanner.Scan()
		choice := strings.TrimSpace(scanner.Text())

		switch choice {
		case "1":
			printTasks(storage)
			waitForEnter(scanner)
		case "2":
			createTask(scanner, storage)
			waitForEnter(scanner)
		case "3":
			updateTask(scanner, storage)
			waitForEnter(scanner)
		case "4":
			deleteTask(scanner, storage)
			waitForEnter(scanner)
		case "5":
			printLabels(storage)
			waitForEnter(scanner)
		case "6":
			createLabel(scanner, storage)
			waitForEnter(scanner)
		case "7":
			printUsers(storage)
			waitForEnter(scanner)
		case "8":
			createUser(scanner, storage)
			waitForEnter(scanner)
		case "9":
			getTasksByIdUser(scanner, storage)
			waitForEnter(scanner)

		case "10":
			fmt.Println("–í—ã—Ö–æ–¥...")
			return
		default:
			fmt.Println("\nüî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
// –ï—Å–ª–∏ —É–±—Ä–∞—Ç—å - —Ç–æ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –º–µ–Ω—é
func waitForEnter(scanner *bufio.Scanner) {
	fmt.Println("\nüîô –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	scanner.Scan()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
func printTasks(storage storage.Interface) {
	tasks, err := storage.Tasks(0, 0) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:", err)
		fmt.Println("-------------------------------")
		return
	}

	if len(tasks) == 0 {
		fmt.Println("-------------------------------")
		fmt.Println("\n‚ö†Ô∏è  –ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")
	for _, task := range tasks {
		fmt.Println("-------------------------------")
		fmt.Printf("üÜî ID: %d\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\nüë§ –ê–≤—Ç–æ—Ä: %d\nüéØ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %d\n",
			task.ID, task.Title, task.Content, task.AuthorID, task.AssignedID)
	}
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
func createTask(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Println("-------------------------------")
	fmt.Print("\nüìå –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	title := strings.TrimSpace(scanner.Text())

	fmt.Print("\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	content := strings.TrimSpace(scanner.Text())

	fmt.Print("\nüë§ –í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ—Ä–∞: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	authorID, err := strconv.Atoi(strings.TrimSpace(scanner.Text()))
	if err != nil {
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ—Ä–∞")
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("-------------------------------")
	fmt.Print("\nüéØ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	assignedID, err := strconv.Atoi(strings.TrimSpace(scanner.Text()))
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("üî¥ –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
		fmt.Println("-------------------------------")
		return
	}

	// –í–≤–æ–¥ –º–µ—Ç–æ–∫ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
	fmt.Println("-------------------------------")
	fmt.Print("\nüè∑Ô∏è  –í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ç–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	labelInput := strings.TrimSpace(scanner.Text())

	var labelIDs []int
	if labelInput != "" {
		labelStrs := strings.Split(labelInput, ",")
		for _, str := range labelStrs {
			labelID, err := strconv.Atoi(strings.TrimSpace(str))
			if err != nil {
				fmt.Println("-------------------------------")
				fmt.Println("üî¥ –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ç–∫–∏")
				fmt.Println("-------------------------------")
				return
			}
			labelIDs = append(labelIDs, labelID)
		}
	}

	// –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
	task := postgres.Task{
		Title:      title,
		Content:    content,
		AuthorID:   authorID,
		AssignedID: assignedID,
	}

	id, err := storage.NewTask(task, labelIDs)
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("-------------------------------")
	fmt.Printf("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: %d\n", id)
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
func updateTask(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Println("-------------------------------")
	fmt.Print("\nüÜî –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	taskID, _ := strconv.Atoi(scanner.Text()) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ

	fmt.Print("\nüìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	title := strings.TrimSpace(scanner.Text())

	fmt.Print("\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	content := strings.TrimSpace(scanner.Text())

	fmt.Print("\nüë§ –í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ—Ä–∞: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	authorID, _ := strconv.Atoi(scanner.Text())

	fmt.Print("\nüéØ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	assignedID, _ := strconv.Atoi(scanner.Text())

	task := postgres.Task{
		ID:         taskID,
		Title:      title,
		Content:    content,
		AuthorID:   authorID,
		AssignedID: assignedID,
	}

	err := storage.UpdateTask(task)
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
func deleteTask(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Print("\nüÜî –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
	scanner.Scan()
	taskID, err := strconv.Atoi(strings.TrimSpace(scanner.Text()))
	if err != nil {
		fmt.Println("\n‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		return
	}

	err = storage.DeleteTask(taskID)
	if err != nil {
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		return
	}

	fmt.Println("\n‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–∫
func printLabels(storage storage.Interface) {
	labels, err := storage.Labels()
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–∫:", err)
		fmt.Println("-------------------------------")
		return
	}

	if len(labels) == 0 {
		fmt.Println("-------------------------------")
		fmt.Println("\n‚ö†Ô∏è  –ú–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("-------------------------------")
	fmt.Println("\nüè∑Ô∏è  –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫:")
	for _, label := range labels {
		fmt.Printf("ID: %d | –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", label.ID, label.Name)
	}
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–µ—Ç–∫–∏
func createLabel(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Println("-------------------------------")
	fmt.Print("\nüè∑Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏: ")
	fmt.Println("-------------------------------")
	scanner.Scan()

	name := strings.TrimSpace(scanner.Text())

	label := postgres.Label{
		Name: name,
	}

	id, err := storage.NewLabel(label)
	if err != nil {
		fmt.Println("\n üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ç–∫–∏: ", err)
		fmt.Println("-------------------------------")
		return
	}

	fmt.Printf("\n‚úÖ –ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: %d\n", id)
	fmt.Println("-------------------------------")

}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func printUsers(storage storage.Interface) {
	users, err := storage.Users()
	if err != nil {
		fmt.Println("-------------------------------")
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err)
		fmt.Println("-------------------------------")
		return
	}

	if len(users) == 0 {
		fmt.Println("-------------------------------")
		fmt.Println("\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("-------------------------------")
	fmt.Println("\nüë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
	for _, user := range users {
		fmt.Printf("ID: %d | –ò–º—è: %s\n", user.ID, user.Name)
	}
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func createUser(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Println("-------------------------------")
	fmt.Print("\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	fmt.Println("-------------------------------")
	scanner.Scan()

	name := strings.TrimSpace(scanner.Text())

	user := postgres.User{
		Name: name,
	}

	id, err := storage.NewUser(user)
	if err != nil {
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
		fmt.Println("-------------------------------")
		return
	}

	fmt.Printf("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: %d\n", id)
	fmt.Println("-------------------------------")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ –∞–≤—Ç–æ—Ä—É
func getTasksByIdUser(scanner *bufio.Scanner, storage storage.Interface) {
	fmt.Println("-------------------------------")
	fmt.Println("\nüë§ –í–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ—Ä–∞: ")
	fmt.Println("-------------------------------")
	scanner.Scan()
	authorID, err := strconv.Atoi(scanner.Text())
	if err != nil {
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		fmt.Println("-------------------------------")
		return
	}

	tasks, err := storage.GetTasksByAuthor(authorID)
	if err != nil {
		fmt.Println("\nüî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:", err)
		fmt.Println("-------------------------------")
		return
	}

	if len(tasks) == 0 {
		fmt.Println("\n‚ö†Ô∏è  –£ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
		fmt.Println("-------------------------------")
		return
	}

	fmt.Println("\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∞–≤—Ç–æ—Ä–∞:")
	for _, task := range tasks {
		fmt.Printf("üÜî ID: %d | üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s | üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n",
			task.ID, task.Title, task.Content)
	}
	fmt.Println("-------------------------------")
}
